/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProductsRouteImport } from './routes/_products'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ProductsPandocxIndexRouteImport } from './routes/_products/pandocx/index'
import { Route as ProductsCcmateIndexRouteImport } from './routes/_products/ccmate/index'

const ProductsRoute = ProductsRouteImport.update({
  id: '/_products',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductsPandocxIndexRoute = ProductsPandocxIndexRouteImport.update({
  id: '/pandocx/',
  path: '/pandocx/',
  getParentRoute: () => ProductsRoute,
} as any)
const ProductsCcmateIndexRoute = ProductsCcmateIndexRouteImport.update({
  id: '/ccmate/',
  path: '/ccmate/',
  getParentRoute: () => ProductsRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ccmate': typeof ProductsCcmateIndexRoute
  '/pandocx': typeof ProductsPandocxIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ccmate': typeof ProductsCcmateIndexRoute
  '/pandocx': typeof ProductsPandocxIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_products': typeof ProductsRouteWithChildren
  '/_products/ccmate/': typeof ProductsCcmateIndexRoute
  '/_products/pandocx/': typeof ProductsPandocxIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/ccmate' | '/pandocx'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ccmate' | '/pandocx'
  id:
    | '__root__'
    | '/'
    | '/_products'
    | '/_products/ccmate/'
    | '/_products/pandocx/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductsRoute: typeof ProductsRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_products': {
      id: '/_products'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProductsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_products/pandocx/': {
      id: '/_products/pandocx/'
      path: '/pandocx'
      fullPath: '/pandocx'
      preLoaderRoute: typeof ProductsPandocxIndexRouteImport
      parentRoute: typeof ProductsRoute
    }
    '/_products/ccmate/': {
      id: '/_products/ccmate/'
      path: '/ccmate'
      fullPath: '/ccmate'
      preLoaderRoute: typeof ProductsCcmateIndexRouteImport
      parentRoute: typeof ProductsRoute
    }
  }
}

interface ProductsRouteChildren {
  ProductsCcmateIndexRoute: typeof ProductsCcmateIndexRoute
  ProductsPandocxIndexRoute: typeof ProductsPandocxIndexRoute
}

const ProductsRouteChildren: ProductsRouteChildren = {
  ProductsCcmateIndexRoute: ProductsCcmateIndexRoute,
  ProductsPandocxIndexRoute: ProductsPandocxIndexRoute,
}

const ProductsRouteWithChildren = ProductsRoute._addFileChildren(
  ProductsRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductsRoute: ProductsRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
